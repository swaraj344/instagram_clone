// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthenticationType {
  EMAIL_PASSWORD
  GOOGLE
  FACEBOOK
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String             @id @default(uuid())
  fullName           String             @map("full_name")
  userName           String             @unique @map("user_name")
  email              String             @unique
  emailVerified      Boolean            @default(false) @map("email_verified")
  phoneNumber        String?            @map("phone_number")
  password           String
  salt               String
  profileImageUrl    String?            @map("profile_image_url")
  bio                String?
  authenticationType AuthenticationType @map("authentication_type")
  role               UserRole           @default(USER)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  followedBy         User[]             @relation("UserFollows")
  following          User[]             @relation("UserFollows")

  @@map("users")
}

model Location {
  id        String      @id @default(uuid())
  latitude  Float
  longitude Float
  name      String
  postMedia PostMedia[]
}

// post table
model Post {
  id           String        @id @default(uuid())
  caption      String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  media        PostMedia[]
  comments     Comment[]
  likes        Like[]
  PostActivity PostActivity?
}

enum PostMediaType {
  IMAGE
  VIDEO
}

model PostMedia {
  id         String        @id @default(uuid())
  postType   PostMediaType @map("post_type")
  url        String
  createdAt  DateTime      @default(now()) @map("created_at")
  location   Location?     @relation(fields: [locationId], references: [id])
  locationId String?       @map("location_id")
  post       Post?         @relation(fields: [postId], references: [id])
  postId     String?
}

model Comment {
  id            String   @id @default(uuid())
  text          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  commentedBy   User     @relation(fields: [commentedById], references: [id])
  commentedById String   @map("commented_by")
  post          Post     @relation(fields: [postId], references: [id])
  postId        String   @map("post_id")
  Likes         Like[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  likedBy   User     @relation(fields: [likedById], references: [id])
  likedById String   @map("liked_by")
  parentId  String?  @map("parent_id")
  Post      Post?    @relation(fields: [parentId], references: [id], map: "post_like")
  comment   Comment? @relation(fields: [parentId], references: [id], map: "comment_like")
}

model PostActivity {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  likeCount    Int      @default(0) @map("like_count")
  commentCount Int      @default(0) @map("comment_count")
  post         Post     @relation(fields: [postId], references: [id])
  postId       String   @unique
}
