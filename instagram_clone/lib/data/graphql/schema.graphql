scalar Date

input CreateUserData {
  userName: String!
  fullName: String
  email: String!
  password: String!
}

type User {
  id: ID!
  fullName: String!
  userName: String!
  email: String!
  emailVerified: Boolean!
  phoneNumber: String
  authenticationType: String
  profileImageURL: String
  role: String
  bio: String
  createdAt: Date
  updatedAt: Date
  posts: [Post!]!
  followedBy: [User!]!
  following: [User!]!
}

input CreatePostData {
  caption: String
  imageUrls: [String]
  location: String
}

type Location {
  id: ID!
  latitude: Float
  longitude: Float
  name: String
}

type Post {
  id: ID!
  caption: String
  createdAt: Date!
  updatedAt: Date!
  user: User!
  media: [PostMedia!]!
  comments: [Comment!]!
  likes: [Like!]!
  PostActivity: PostActivity!
}

type FeedPost {
  id: ID!
  caption: String
  updatedAt: Date!
  user: User!
  likeCount: Int!
  commentCount: Int!
  mediaUrl: [String!]!
}

enum PostMediaType {
  IMAGE
  VIDEO
}

type PostMedia {
  id: ID!
  postType: PostMediaType!
  url: String!
  createdAt: Date!
  location: Location
}

type Comment {
  id: ID!
  text: String
  createdAt: Date!
  updatedAt: Date
  commentedBy: User!
}

type Like {
  id: ID!
  createdAt: Date!
  updatedAt: Date
  likedBy: User!
  parentId: String
}

type PostActivity {
  id: String!
  createdAt: Date!
  updatedAt: Date
  likeCount: Int!
  commentCount: Int!
}

type DeletePostPayload {
  id: ID!
  message: String
}

type LikePostPayload {
  id: ID!
  message: String
}

type StatusResponse {
  success: Boolean!
  message: String
}

type Query {
  getSessionUser: User
  verifyGoogleAuthToken(googleToken: String!): String
  singinwithEmailPassword(email: String!, password: String): String
  getPreSignedUrlForImageUpload: String
  getFeeds: [FeedPost]
}

type Mutation {
  createUser(data: CreateUserData!): User
  createPost(data: CreatePostData!): Post
  deletePost(postId: ID!): DeletePostPayload
  likePost(postId: ID!): LikePostPayload
  unLikePost(postId: ID!): LikePostPayload
  createComment(postId: ID!, text: String!): Comment
  deleteComment(commentId: ID!): StatusResponse
}
